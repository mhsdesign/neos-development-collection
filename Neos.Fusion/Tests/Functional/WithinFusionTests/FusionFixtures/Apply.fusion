prototype(Neos.Fusion:TestRenderer).@class = 'Neos\\Fusion\\Tests\\Functional\\View\\Fixtures\\TestRenderer'
prototype(Neos.Fusion:Value).@class = 'Neos\\Fusion\\FusionObjects\\ValueImplementation'
prototype(Neos.Fusion:Loop).@class = 'Neos\\Fusion\\FusionObjects\\LoopImplementation'
prototype(Neos.Fusion:DataStructure).@class = 'Neos\\Fusion\\FusionObjects\\DataStructureImplementation'
prototype(Neos.Fusion:Join).@class = 'Neos\\Fusion\\FusionObjects\\JoinImplementation'
prototype(Neos.Fusion:Renderer).@class = 'Neos\\Fusion\\FusionObjects\\RendererImplementation'

prototype(Neos.Fusion:EelValue) < prototype(Neos.Fusion:Value) {
  value = ${'original eel expression'}
}

apply_renders_original_eel_expression_test {
  @test.unchangedEelValue.@afterRender = ${ self.assertSame(result, 'original eel expression') }

  @fusion.noApply = Neos.Fusion:EelValue

  @fusion.applyWithStringReturn = Neos.Fusion:EelValue {
    @apply.alterValue = Neos.Fusion:Value {
      value = 'an fusion objects that retuns not an array!!!'
    }
  }

  @fusion.renderEelValueWithInvalidExpressionSpread = Neos.Fusion:EelValue {
    @apply.alterValue = ${'an expression but not an array!!!'}
  }
}

apply_render_eel_value_with_single_spread_test {
  @test.changedEelValue.@afterRender = ${ self.assertSame(result, 'altered eel expression') }

  @fusion.applyWithEelObject = Neos.Fusion:EelValue {
    @apply.alterValue = ${{value: 'altered eel expression'}}
  }

  @fusion.applyWithFusionObject = Neos.Fusion:EelValue {
    @apply.alterValue = Neos.Fusion:DataStructure {
      value = 'altered eel expression'
    }
  }
}
